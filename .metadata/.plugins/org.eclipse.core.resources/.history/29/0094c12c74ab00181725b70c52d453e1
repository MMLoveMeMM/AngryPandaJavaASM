package com.org;

import java.io.File;
import java.io.FileOutputStream;
import java.io.PrintWriter;

import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.util.TraceClassVisitor;
public class CreateAddOperImpl {
	
	public static void createImpl(String[] args) throws Exception {
		ClassWriter cw = new ClassWriter(0);
		PrintWriter printWriter = new PrintWriter(System.out);
		TraceClassVisitor visitor = new TraceClassVisitor(cw, printWriter);
	 
		visitor.visit(Opcodes.V1_7, Opcodes.ACC_PUBLIC, "asm/demo/AddOperImpl", null, "java/lang/Object", new String[]{"asm/demo/AddOper"});
	 
		//添加构造方法
		MethodVisitor mv = visitor.visitMethod(Opcodes.ACC_PUBLIC, "<init>", "()V", null, null);
		mv.visitCode();
		mv.visitVarInsn(Opcodes.ALOAD, 0);
		mv.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/Object", "<init>", "()V");
		mv.visitInsn(Opcodes.RETURN);
		mv.visitMaxs(1, 1);
		mv.visitEnd();
	 
		// 添加add方法
		mv = visitor.visitMethod(Opcodes.ACC_PUBLIC, "add", "(II)I", null, null);
		mv.visitCode();
		mv.visitVarInsn(Opcodes.ILOAD, 1);
		mv.visitVarInsn(Opcodes.ILOAD, 2);
		mv.visitInsn(Opcodes.IADD);
		mv.visitInsn(Opcodes.IRETURN);
		mv.visitMaxs(2, 3);
		mv.visitEnd();
	 
		visitor.visitEnd();
	 
		FileOutputStream fos = new FileOutputStream(new File("D:/AddOperImpl.class"));
		fos.write(cw.toByteArray());
		fos.close();
	}
	
	public void usingImpl() {
		
	}
	
}
